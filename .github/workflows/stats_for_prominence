import yaml
import os # Import the os module to handle file paths

def analyze_yaml_data(yaml_string):
    """
    Parses a YAML string to count symbols (list items) and categories.

    Args:
        yaml_string (str): A string containing the YAML data.

    Returns:
        dict: A dictionary with statistics, or None if parsing fails.
    """
    stats = {
        'total_symbols': 0,
        'category_counts': {},
        'total_categories': 0,
        'all_symbols': []
    }

    # This recursive helper function traverses the nested dictionary structure.
    def traverse(node):
        """Recursively walks through the data to find and count list items."""
        if isinstance(node, dict):
            for key, value in node.items():
                # If a value is a list, we assume it's a list of symbols.
                if isinstance(value, list):
                    # Filter out any non-string items just in case
                    symbols_in_list = [item for item in value if isinstance(item, str)]
                    count = len(symbols_in_list)
                    
                    # Update our statistics
                    stats['total_symbols'] += count
                    stats['category_counts'][key] = count
                    stats['total_categories'] += 1
                    stats['all_symbols'].extend(symbols_in_list)
                else:
                    # If it's another dictionary, go deeper.
                    traverse(value)

    try:
        # Use safe_load to parse the YAML. It's more secure.
        data = yaml.safe_load(yaml_string)
        
        # Start the traversal from the top level of the parsed data.
        traverse(data)
        
        return stats

    except yaml.YAMLError as e:
        print(f"Error: Could not parse the YAML data. Details: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None

# --- Main execution block ---
if __name__ == "__main__":
    # Define the path to the YAML file relative to the script's new location.
    # This makes the script more robust and runnable from different directories.
    try:
        # Get the absolute path of the directory where the script is located.
        script_dir = os.path.dirname(os.path.abspath(__file__))
        # Assuming the script is in '/.github/workflows', we go up three levels to the project root.
        project_root = os.path.abspath(os.path.join(script_dir, '..', '..', '..'))
        # Construct the full path to the YAML file from the project root.
        file_path = os.path.join(project_root, 'prominence', 'list_of_prominent_functions.yaml')
    except NameError:
        # __file__ is not defined in some environments (like interactive interpreters).
        # In that case, we fall back to a simple relative path. This is less robust.
        # This assumes the script is run from the project root directory.
        file_path = os.path.join('prominence', 'list_of_prominent_functions.yaml')
    
    yaml_content = None

    # Try to open and read the file.
    try:
        # 'with' ensures the file is properly closed even if errors occur.
        with open(file_path, 'r', encoding='utf-8') as file:
            yaml_content = file.read()
    except FileNotFoundError:
        print(f"Error: The file was not found at the specified path: {file_path}")
        print("Please make sure the file exists and the script is run from the correct directory.")
    except Exception as e:
        print(f"An error occurred while reading the file: {e}")

    # Only proceed if the file content was successfully read.
    if yaml_content:
        # Get the statistics by calling our analysis function.
        statistics = analyze_yaml_data(yaml_content)

        # Print the results in a clean, readable format.
        if statistics:
            print("--- YAML File Statistics ---")
            print(f"File: '{file_path}'")
            print(f"Total Number of Symbols (Job Titles): {statistics['total_symbols']}")
            print(f"Total Number of Categories: {statistics['total_categories']}")
            print("\n--- Breakdown by Category ---")
            
            if statistics['category_counts']:
                # Sort categories alphabetically for consistent output
                for category, count in sorted(statistics['category_counts'].items()):
                    # Format the category name for better readability
                    formatted_category = category.replace('_', ' ').title()
                    print(f"- {formatted_category}: {count} symbols")
            else:
                print("No categories with symbol lists were found.")
                
            print("\n--- End of Report ---")
